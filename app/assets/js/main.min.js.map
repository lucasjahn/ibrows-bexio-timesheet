{"version":3,"sources":["app.module.js","admin/admin.module.js","core/core.module.js","dashboard/dashboard.module.js","layout/layout.module.js","widgets/widgets.module.js","blocks/exception/exception.module.js","blocks/logger/logger.module.js","blocks/router/router.module.js","admin/admin.controller.js","admin/admin.controller.spec.js","admin/admin.route.js","admin/admin.route.spec.js","core/authservice.js","core/config.js","core/constants.js","core/core.route.js","main.min.js","dashboard/dashboard.controller.js","dashboard/dashboard.route.js","layout/ht-sidebar.directive.js","layout/ht-top-nav.directive.js","layout/shell.controller.js","widgets/ht-img-person.directive.js","widgets/ht-widget-header.directive.js","blocks/exception/exception-handler.provider.js","blocks/exception/exception-handler.provider.spec.js","blocks/exception/exception.js","blocks/logger/logger.js","blocks/router/router-helper.provider.js"],"names":["angular","module","AdminController","logger","activate","info","vm","this","title","controller","$inject","describe","beforeEach","bard","appModule","inject","$controller","$rootScope","$apply","verifyNoOutstandingHttpRequests","it","expect","to","be","defined","equal","$log","logs","match","appRun","routerHelper","configureStates","getStates","state","config","url","templateUrl","controllerAs","settings","nav","content","run","view","fakeToastr","$templateCache","put","$state","href","get","go","is","authservice","$http","$q","exception","getAccessToken","success","response","data","fail","e","catcher","windowParams","width","height","alwaysOnTop","autoHideMenuBar","webPreferences","nodeIntegration","closable","frame","center","options","scope","scopes","join","Math","random","toString","substring","myApiOauth","electronOauth2","then","service","require","clientId","clientSecret","authorizationUrl","tokenUrl","useBasicAuthorizationHeader","factory","toastrConfig","toastr","timeOut","positionClass","configure","$logProvider","routerHelperProvider","exceptionHandlerProvider","debugEnabled","appErrorPrefix","docTitle","appTitle","core","value","constant","moment","otherwise","DashboardController","promises","getMessageCount","getPeople","all","messageCount","people","news","description","htSidebar","link","element","attrs","dropdown","dropClass","preventDefault","$dropdownElement","hasClass","removeClass","$sidebarInner","slideUp","whenDoneAnimating","slideDown","addClass","find","click","directive","restrict","htTopNav","TopNavController","$scope","isCollapsed","bindToController","navline","ShellController","console","log","tokendata","htImgPerson","$observe","basePath","unknownImage","$set","imageBasePath","unknownPersonImageSource","htWidgetHeader","attr","toggleContent","allowCollapse","siblings","toggle","subtitle","rightText","undefined","$get","$provide","decorator","extendExceptionHandler","$delegate","exceptionHandler","cause","errorData","message","error","provider","functionThatWillThrow","Error","mocks","errorMessage","prefix","_exceptionHandlerProvider_","ex","thrownDescription","newMessage","reject","warning","warn","showToasts","$locationProvider","$stateProvider","$urlRouterProvider","RouterHelper","$location","states","otherwisePath","forEach","resolve","extend","resolveAlways","hasOtherwise","handleRoutingErrors","$on","event","toState","toParams","fromState","fromParams","handlingStateChangeError","stateCounts","errors","destination","name","loadedTemplateUrl","msg","statusText","status","path","init","updateDocTitle","changes","window","history","pushState","location","hash","html5Mode","cfg"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('app', [\n    'app.core',\n    //'app.widgets',\n    //'app.admin',\n    //'app.dashboard',\n    'app.layout'\n  ]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.admin', [\n    'app.core',\n    'app.widgets'\n  ]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.core', [\n        'ngAnimate',\n        'ngSanitize',\n        'ngRoute',\n\n        // 3rd paty\n        'lumx'\n    ]);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.dashboard', [\n    'app.core',\n    'app.widgets'\n  ]);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.layout', []);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.widgets', []);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('blocks.exception', ['blocks.logger']);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('blocks.logger', []);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('blocks.router', [\n    'ui.router',\n    'blocks.logger'\n  ]);\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.admin')\n    .controller('AdminController', AdminController);\n\n  AdminController.$inject = ['logger'];\n  /* @ngInject */\n  function AdminController(logger) {\n    var vm = this;\n    vm.title = 'Admin';\n\n    activate();\n\n    function activate() {\n      logger.info('Activated Admin View');\n    }\n  }\n})();\n","/* jshint -W117, -W030 */\ndescribe('AdminController', function() {\n  var controller;\n\n  beforeEach(function() {\n    bard.appModule('app.admin');\n    bard.inject('$controller', '$log', '$rootScope');\n  });\n\n  beforeEach(function() {\n    controller = $controller('AdminController');\n    $rootScope.$apply();\n  });\n\n  bard.verifyNoOutstandingHttpRequests();\n\n  describe('Admin controller', function() {\n    it('should be created successfully', function() {\n      expect(controller).to.be.defined;\n    });\n\n    describe('after activate', function() {\n      it('should have title of Admin', function() {\n        expect(controller.title).to.equal('Admin');\n      });\n\n      it('should have logged \"Activated\"', function() {\n        expect($log.info.logs).to.match(/Activated/);\n      });\n    });\n  });\n});\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.admin')\n    .run(appRun);\n\n  appRun.$inject = ['routerHelper'];\n  /* @ngInject */\n  function appRun(routerHelper) {\n    routerHelper.configureStates(getStates());\n  }\n\n  function getStates() {\n    return [\n      {\n        state: 'admin',\n        config: {\n          url: '/admin',\n          templateUrl: 'app/admin/admin.html',\n          controller: 'AdminController',\n          controllerAs: 'vm',\n          title: 'Admin',\n          settings: {\n            nav: 2,\n            content: '<i class=\"fa fa-lock\"></i> Admin'\n          }\n        }\n      }\n    ];\n  }\n})();\n","/* jshint -W117, -W030 */\ndescribe('admin routes', function() {\n  describe('state', function() {\n    var view = 'app/admin/admin.html';\n\n    beforeEach(function() {\n      module('app.admin', bard.fakeToastr);\n      bard.inject('$httpBackend', '$location', '$rootScope', '$state', '$templateCache');\n    });\n\n    beforeEach(function() {\n      $templateCache.put(view, '');\n    });\n\n    it('should map state admin to url /admin ', function() {\n      expect($state.href('admin', {})).to.equal('/admin');\n    });\n\n    it('should map /admin route to admin View template', function() {\n      expect($state.get('admin').templateUrl).to.equal(view);\n    });\n\n    it('of admin should work with $state.go', function() {\n      $state.go('admin');\n      $rootScope.$apply();\n      expect($state.is('admin'));\n    });\n  });\n});\n","(function() {\n  'use strict';\n\n  var electronOauth2 = require('electron-oauth2');\n\n  var config = {\n    clientId: '6777100542.apps.bexio.com',\n    clientSecret: 'FfdjCu3Q3Rp8Ujmcch2iFGHJC3o=',\n    authorizationUrl: 'https://office.bexio.com/oauth/authorize',\n    tokenUrl: 'https://office.bexio.com/oauth/access_token',\n    useBasicAuthorizationHeader: false\n  };\n\n  var scopes = [\n    'article_show',\n    'calendar_show',\n    'contact_show',\n    'lead_show',\n    'task_show',\n    'monitoring_show',\n    'monitoring_edit'\n  ];\n\n  angular\n    .module('app.core')\n    .factory('authservice', authservice);\n\n  authservice.$inject = ['$http', '$q', 'exception', 'logger'];\n  /* @ngInject */\n  function authservice($http, $q, exception, logger) {\n    var service = {\n      getAccessToken: getAccessToken\n    };\n\n    return service;\n\n    function getAccessToken() {\n      var windowParams = {\n        width: 800,\n        height: 600,\n        alwaysOnTop: true,\n        autoHideMenuBar: true,\n        webPreferences: {\n          nodeIntegration: false\n        },\n        closable: false,\n        frame: false,\n        center: true\n      };\n\n      var options = {\n        scope: scopes.join(' '),\n        state: Math.random().toString(36).substring(7)\n      };\n\n      var myApiOauth = electronOauth2(config, windowParams);\n\n      // Get access token promise (electron-oauth2)\n      return myApiOauth.getAccessToken(options)\n          .then(success)\n          .catch(fail);\n\n      function success(response) {\n        return response.data;\n      }\n\n      function fail(e) {\n        return exception.catcher('Couldn\\'t get an access token')(e);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  var core = angular.module('app.core');\n\n  core.config(toastrConfig);\n\n  toastrConfig.$inject = ['toastr'];\n  /* @ngInject */\n  function toastrConfig(toastr) {\n    toastr.options.timeOut = 4000;\n    toastr.options.positionClass = 'toast-bottom-right';\n  }\n\n  var config = {\n    appErrorPrefix: '[bexioTt Error] ',\n    appTitle: 'bexioTt'\n  };\n\n  core.value('config', config);\n\n  core.config(configure);\n\n  configure.$inject = ['$logProvider', 'routerHelperProvider', 'exceptionHandlerProvider'];\n  /* @ngInject */\n  function configure($logProvider, routerHelperProvider, exceptionHandlerProvider) {\n    if ($logProvider.debugEnabled) {\n      $logProvider.debugEnabled(true);\n    }\n    exceptionHandlerProvider.configure(config.appErrorPrefix);\n    routerHelperProvider.configure({ docTitle: config.appTitle + ': ' });\n  }\n\n})();\n","/* global toastr:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('app.core')\n    .constant('toastr', toastr)\n    .constant('moment', moment);\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.core')\n    .run(appRun);\n\n  /* @ngInject */\n  function appRun(routerHelper) {\n    var otherwise = '/404';\n    routerHelper.configureStates(getStates(), otherwise);\n  }\n\n  function getStates() {\n    return [\n      {\n        state: '404',\n        config: {\n          url: '/404',\n          templateUrl: 'app/core/404.html',\n          title: '404'\n        }\n      }\n    ];\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app', [\n    'app.core',\n    //'app.widgets',\n    //'app.admin',\n    //'app.dashboard',\n    'app.layout'\n  ]);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('app.admin', [\n    'app.core',\n    'app.widgets'\n  ]);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.core', [\n        'ngAnimate',\n        'ngSanitize',\n        'ngRoute',\n\n        // 3rd paty\n        'lumx'\n    ]);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('app.dashboard', [\n    'app.core',\n    'app.widgets'\n  ]);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('app.layout', []);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('app.widgets', []);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('blocks.exception', ['blocks.logger']);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('blocks.logger', []);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('blocks.router', [\n    'ui.router',\n    'blocks.logger'\n  ]);\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.admin')\n    .controller('AdminController', AdminController);\n\n  AdminController.$inject = ['logger'];\n  /* @ngInject */\n  function AdminController(logger) {\n    var vm = this;\n    vm.title = 'Admin';\n\n    activate();\n\n    function activate() {\n      logger.info('Activated Admin View');\n    }\n  }\n})();\n\n/* jshint -W117, -W030 */\ndescribe('AdminController', function() {\n  var controller;\n\n  beforeEach(function() {\n    bard.appModule('app.admin');\n    bard.inject('$controller', '$log', '$rootScope');\n  });\n\n  beforeEach(function() {\n    controller = $controller('AdminController');\n    $rootScope.$apply();\n  });\n\n  bard.verifyNoOutstandingHttpRequests();\n\n  describe('Admin controller', function() {\n    it('should be created successfully', function() {\n      expect(controller).to.be.defined;\n    });\n\n    describe('after activate', function() {\n      it('should have title of Admin', function() {\n        expect(controller.title).to.equal('Admin');\n      });\n\n      it('should have logged \"Activated\"', function() {\n        expect($log.info.logs).to.match(/Activated/);\n      });\n    });\n  });\n});\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.admin')\n    .run(appRun);\n\n  appRun.$inject = ['routerHelper'];\n  /* @ngInject */\n  function appRun(routerHelper) {\n    routerHelper.configureStates(getStates());\n  }\n\n  function getStates() {\n    return [\n      {\n        state: 'admin',\n        config: {\n          url: '/admin',\n          templateUrl: 'app/admin/admin.html',\n          controller: 'AdminController',\n          controllerAs: 'vm',\n          title: 'Admin',\n          settings: {\n            nav: 2,\n            content: '<i class=\"fa fa-lock\"></i> Admin'\n          }\n        }\n      }\n    ];\n  }\n})();\n\n/* jshint -W117, -W030 */\ndescribe('admin routes', function() {\n  describe('state', function() {\n    var view = 'app/admin/admin.html';\n\n    beforeEach(function() {\n      module('app.admin', bard.fakeToastr);\n      bard.inject('$httpBackend', '$location', '$rootScope', '$state', '$templateCache');\n    });\n\n    beforeEach(function() {\n      $templateCache.put(view, '');\n    });\n\n    it('should map state admin to url /admin ', function() {\n      expect($state.href('admin', {})).to.equal('/admin');\n    });\n\n    it('should map /admin route to admin View template', function() {\n      expect($state.get('admin').templateUrl).to.equal(view);\n    });\n\n    it('of admin should work with $state.go', function() {\n      $state.go('admin');\n      $rootScope.$apply();\n      expect($state.is('admin'));\n    });\n  });\n});\n\n(function() {\n  'use strict';\n\n  var electronOauth2 = require('electron-oauth2');\n\n  var config = {\n    clientId: '6777100542.apps.bexio.com',\n    clientSecret: 'FfdjCu3Q3Rp8Ujmcch2iFGHJC3o=',\n    authorizationUrl: 'https://office.bexio.com/oauth/authorize',\n    tokenUrl: 'https://office.bexio.com/oauth/access_token',\n    useBasicAuthorizationHeader: false\n  };\n\n  var scopes = [\n    'article_show',\n    'calendar_show',\n    'contact_show',\n    'lead_show',\n    'task_show',\n    'monitoring_show',\n    'monitoring_edit'\n  ];\n\n  angular\n    .module('app.core')\n    .factory('authservice', authservice);\n\n  authservice.$inject = ['$http', '$q', 'exception', 'logger'];\n  /* @ngInject */\n  function authservice($http, $q, exception, logger) {\n    var service = {\n      getAccessToken: getAccessToken\n    };\n\n    return service;\n\n    function getAccessToken() {\n      var windowParams = {\n        width: 800,\n        height: 600,\n        alwaysOnTop: true,\n        autoHideMenuBar: true,\n        webPreferences: {\n          nodeIntegration: false\n        },\n        closable: false,\n        frame: false,\n        center: true\n      };\n\n      var options = {\n        scope: scopes.join(' '),\n        state: Math.random().toString(36).substring(7)\n      };\n\n      var myApiOauth = electronOauth2(config, windowParams);\n\n      // Get access token promise (electron-oauth2)\n      return myApiOauth.getAccessToken(options)\n          .then(success)\n          .catch(fail);\n\n      function success(response) {\n        return response.data;\n      }\n\n      function fail(e) {\n        return exception.catcher('Couldn\\'t get an access token')(e);\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  var core = angular.module('app.core');\n\n  core.config(toastrConfig);\n\n  toastrConfig.$inject = ['toastr'];\n  /* @ngInject */\n  function toastrConfig(toastr) {\n    toastr.options.timeOut = 4000;\n    toastr.options.positionClass = 'toast-bottom-right';\n  }\n\n  var config = {\n    appErrorPrefix: '[bexioTt Error] ',\n    appTitle: 'bexioTt'\n  };\n\n  core.value('config', config);\n\n  core.config(configure);\n\n  configure.$inject = ['$logProvider', 'routerHelperProvider', 'exceptionHandlerProvider'];\n  /* @ngInject */\n  function configure($logProvider, routerHelperProvider, exceptionHandlerProvider) {\n    if ($logProvider.debugEnabled) {\n      $logProvider.debugEnabled(true);\n    }\n    exceptionHandlerProvider.configure(config.appErrorPrefix);\n    routerHelperProvider.configure({ docTitle: config.appTitle + ': ' });\n  }\n\n})();\n\n/* global toastr:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('app.core')\n    .constant('toastr', toastr)\n    .constant('moment', moment);\n})();\n\n(function() {\n  'use strict';\n\n  appRun.$inject = ['routerHelper'];\n  angular\n    .module('app.core')\n    .run(appRun);\n\n  /* @ngInject */\n  function appRun(routerHelper) {\n    var otherwise = '/404';\n    routerHelper.configureStates(getStates(), otherwise);\n  }\n\n  function getStates() {\n    return [\n      {\n        state: '404',\n        config: {\n          url: '/404',\n          templateUrl: 'app/core/404.html',\n          title: '404'\n        }\n      }\n    ];\n  }\n})();\n\n(function() {\n  'use strict';\n\n  DashboardController.$inject = ['$q', 'authservice', 'logger'];\n  angular\n    .module('app.dashboard')\n    .controller('DashboardController', DashboardController);\n\n  /* @ngInject */\n  function DashboardController($q, authservice, logger) {\n    var vm = this;\n    vm.news = {\n      title: 'bexioTt',\n      description: 'Hot Towel Angular is a SPA template for Angular developers.'\n    };\n    vm.messageCount = 0;\n    vm.people = [];\n    vm.title = 'Dashboard';\n\n    activate();\n\n    function activate() {\n      var promises = [getMessageCount(), getPeople()];\n      return $q.all(promises).then(function() {\n        logger.info('Activated Dashboard View');\n      });\n    }\n\n    function getMessageCount() {\n      return authservice.getMessageCount().then(function(data) {\n        vm.messageCount = data;\n        return vm.messageCount;\n      });\n    }\n\n    function getPeople() {\n      return authservice.getPeople().then(function(data) {\n        vm.people = data;\n        return vm.people;\n      });\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.dashboard')\n    .run(appRun);\n\n  appRun.$inject = ['routerHelper'];\n  /* @ngInject */\n  function appRun(routerHelper) {\n    routerHelper.configureStates(getStates());\n  }\n\n  function getStates() {\n    return [\n      {\n        state: 'dashboard',\n        config: {\n          url: '/',\n          templateUrl: 'app/dashboard/dashboard.html',\n          controller: 'DashboardController',\n          controllerAs: 'vm',\n          title: 'dashboard',\n          settings: {\n            nav: 1,\n            content: '<i class=\"fa fa-dashboard\"></i> Dashboard'\n          }\n        }\n      }\n    ];\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.layout')\n    .directive('htSidebar', htSidebar);\n\n  /* @ngInject */\n  function htSidebar() {\n    // Opens and closes the sidebar menu.\n    // Usage:\n    //  <div ht-sidebar\">\n    //  <div ht-sidebar whenDoneAnimating=\"vm.sidebarReady()\">\n    // Creates:\n    //  <div ht-sidebar class=\"sidebar\">\n    var directive = {\n      link: link,\n      restrict: 'EA',\n      scope: {\n        whenDoneAnimating: '&?'\n      }\n    };\n    return directive;\n\n    function link(scope, element, attrs) {\n      var $sidebarInner = element.find('.sidebar-inner');\n      var $dropdownElement = element.find('.sidebar-dropdown a');\n      element.addClass('sidebar');\n      $dropdownElement.click(dropdown);\n\n      function dropdown(e) {\n        var dropClass = 'dropy';\n        e.preventDefault();\n        if (!$dropdownElement.hasClass(dropClass)) {\n          $sidebarInner.slideDown(350, scope.whenDoneAnimating);\n          $dropdownElement.addClass(dropClass);\n        } else if ($dropdownElement.hasClass(dropClass)) {\n          $dropdownElement.removeClass(dropClass);\n          $sidebarInner.slideUp(350, scope.whenDoneAnimating);\n        }\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.layout')\n    .directive('htTopNav', htTopNav);\n\n  /* @ngInject */\n  function htTopNav() {\n    var directive = {\n      bindToController: true,\n      controller: TopNavController,\n      controllerAs: 'vm',\n      restrict: 'EA',\n      scope: {\n        'navline': '='\n      },\n      templateUrl: 'app/layout/ht-top-nav.html'\n    };\n\n    TopNavController.$inject = ['$scope'];\n\n    /* @ngInject */\n    function TopNavController($scope) {\n      var vm = this;\n      $scope.isCollapsed = true;\n    }\n\n    return directive;\n  }\n})();\n\n(function() {\n  'use strict';\n\n  ShellController.$inject = ['$q', 'authservice'];\n  angular\n    .module('app.layout')\n    .controller('ShellController', ShellController);\n\n  /* @ngInject */\n  function ShellController($q, authservice) {\n    var vm = this;\n\n    function activate() {\n      var promises = [getAccessToken()];\n      return $q.all(promises).then(function() {\n        console.log('Token '+ vm);\n      });\n    }\n\n    activate();\n\n    function getAccessToken() {\n      return authservice.getPeople().then(function(data) {\n        vm.tokendata = data;\n        return vm.tokendata;\n      });\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.widgets')\n    .directive('htImgPerson', htImgPerson);\n\n  htImgPerson.$inject = ['config'];\n  /* @ngInject */\n  function htImgPerson(config) {\n    //Usage:\n    //<img ht-img-person=\"{{person.imageSource}}\"/>\n    var basePath = config.imageBasePath;\n    var unknownImage = config.unknownPersonImageSource;\n    var directive = {\n      link: link,\n      restrict: 'A'\n    };\n    return directive;\n\n    function link(scope, element, attrs) {\n      attrs.$observe('htImgPerson', function(value) {\n        value = basePath + (value || unknownImage);\n        attrs.$set('src', value);\n      });\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('app.widgets')\n    .directive('htWidgetHeader', htWidgetHeader);\n\n  /* @ngInject */\n  function htWidgetHeader() {\n    //Usage:\n    //<div ht-widget-header title=\"vm.map.title\"></div>\n    // Creates:\n    // <div ht-widget-header=\"\"\n    //      title=\"Movie\"\n    //      allow-collapse=\"true\" </div>\n    var directive = {\n      scope: {\n        'title': '@',\n        'subtitle': '@',\n        'rightText': '@',\n        'allowCollapse': '@'\n      },\n      templateUrl: 'app/widgets/widget-header.html',\n      restrict: 'EA',\n      link: link\n    };\n    return directive;\n\n    function link(scope, element, attr) {\n      scope.toggleContent = function() {\n        if (scope.allowCollapse === 'true') {\n          var content = angular.element(element).siblings('.widget-content');\n          content.toggle();\n        }\n      };\n    }\n  }\n})();\n\n// Include in index.html so that app level exceptions are handled.\n// Exclude from testRunner.html which should run exactly what it wants to run\n(function() {\n  'use strict';\n\n  angular\n    .module('blocks.exception')\n    .provider('exceptionHandler', exceptionHandlerProvider)\n    .config(config);\n\n  /**\n   * Must configure the exception handling\n   */\n  function exceptionHandlerProvider() {\n    /* jshint validthis:true */\n    this.config = {\n      appErrorPrefix: undefined\n    };\n\n    this.configure = function(appErrorPrefix) {\n      this.config.appErrorPrefix = appErrorPrefix;\n    };\n\n    this.$get = function() {\n      return { config: this.config };\n    };\n  }\n\n  config.$inject = ['$provide'];\n\n  /**\n   * Configure by setting an optional string value for appErrorPrefix.\n   * Accessible via config.appErrorPrefix (via config value).\n   * @param  {Object} $provide\n   */\n  /* @ngInject */\n  function config($provide) {\n    $provide.decorator('$exceptionHandler', extendExceptionHandler);\n  }\n\n  extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];\n\n  /**\n   * Extend the $exceptionHandler service to also display a toast.\n   * @param  {Object} $delegate\n   * @param  {Object} exceptionHandler\n   * @param  {Object} logger\n   * @return {Function} the decorated $exceptionHandler service\n   */\n  function extendExceptionHandler($delegate, exceptionHandler, logger) {\n    return function(exception, cause) {\n      var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';\n      var errorData = { exception: exception, cause: cause };\n      exception.message = appErrorPrefix + exception.message;\n      $delegate(exception, cause);\n      /**\n       * Could add the error to a service's collection,\n       * add errors to $rootScope, log errors to remote web server,\n       * or log locally. Or throw hard. It is entirely up to you.\n       * throw exception;\n       *\n       * @example\n       *     throw { message: 'error message we added' };\n       */\n      logger.error(exception.message, errorData);\n    };\n  }\n})();\n\n/* jshint -W117, -W030 */\ndescribe('blocks.exception', function() {\n  var exceptionHandlerProvider;\n  var mocks = {\n    errorMessage: 'fake error',\n    prefix: '[TEST]: '\n  };\n\n  beforeEach(function() {\n    bard.appModule('blocks.exception', function(_exceptionHandlerProvider_) {\n      exceptionHandlerProvider = _exceptionHandlerProvider_;\n    });\n    bard.inject('$rootScope');\n  });\n\n  bard.verifyNoOutstandingHttpRequests();\n\n  describe('exceptionHandlerProvider', function() {\n    it('should have a dummy test', inject(function() {\n      expect(true).to.equal(true);\n    }));\n\n    it('should have exceptionHandlerProvider defined', inject(function() {\n      expect(exceptionHandlerProvider).to.be.defined;\n    }));\n\n    it('should have configuration', inject(function() {\n      expect(exceptionHandlerProvider.config).to.be.defined;\n    }));\n\n    it('should have configuration', inject(function() {\n      expect(exceptionHandlerProvider.configure).to.be.defined;\n    }));\n\n    describe('with appErrorPrefix', function() {\n      beforeEach(function() {\n        exceptionHandlerProvider.configure(mocks.prefix);\n      });\n\n      it('should have appErrorPrefix defined', inject(function() {\n        expect(exceptionHandlerProvider.$get().config.appErrorPrefix).to.be.defined;\n      }));\n\n      it('should have appErrorPrefix set properly', inject(function() {\n        expect(exceptionHandlerProvider.$get().config.appErrorPrefix)\n          .to.equal(mocks.prefix);\n      }));\n\n      it('should throw an error when forced', inject(function() {\n        expect(functionThatWillThrow).to.throw();\n      }));\n\n      it('manual error is handled by decorator', function() {\n        var exception;\n        exceptionHandlerProvider.configure(mocks.prefix);\n        try {\n          $rootScope.$apply(functionThatWillThrow);\n        }\n        catch (ex) {\n          exception = ex;\n          expect(ex.message).to.equal(mocks.prefix + mocks.errorMessage);\n        }\n      });\n    });\n  });\n\n  function functionThatWillThrow() {\n    throw new Error(mocks.errorMessage);\n  }\n});\n\n(function() {\n  'use strict';\n\n  exception.$inject = ['$q', 'logger'];\n  angular\n    .module('blocks.exception')\n    .factory('exception', exception);\n\n  /* @ngInject */\n  function exception($q, logger) {\n    var service = {\n      catcher: catcher\n    };\n    return service;\n\n    function catcher(message) {\n      return function(e) {\n        var thrownDescription;\n        var newMessage;\n        if (e.data && e.data.description) {\n          thrownDescription = '\\n' + e.data.description;\n          newMessage = message + thrownDescription;\n        }\n        e.data.description = newMessage;\n        logger.error(newMessage);\n        return $q.reject(e);\n      };\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('blocks.logger')\n    .factory('logger', logger);\n\n  logger.$inject = ['$log', 'toastr'];\n\n  /* @ngInject */\n  function logger($log, toastr) {\n    var service = {\n      showToasts: true,\n\n      error: error,\n      info: info,\n      success: success,\n      warning: warning,\n\n      // straight to console; bypass toastr\n      log: $log.log\n    };\n\n    return service;\n    /////////////////////\n\n    function error(message, data, title) {\n      toastr.error(message, title);\n      $log.error('Error: ' + message, data);\n    }\n\n    function info(message, data, title) {\n      toastr.info(message, title);\n      $log.info('Info: ' + message, data);\n    }\n\n    function success(message, data, title) {\n      toastr.success(message, title);\n      $log.info('Success: ' + message, data);\n    }\n\n    function warning(message, data, title) {\n      toastr.warning(message, title);\n      $log.warn('Warning: ' + message, data);\n    }\n  }\n} ());\n\n/* Help configure the state-base ui.router */\n(function() {\n  'use strict';\n\n  angular\n    .module('blocks.router')\n    .provider('routerHelper', routerHelperProvider);\n\n  routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n  /* @ngInject */\n  function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\n    /* jshint validthis:true */\n    var config = {\n      docTitle: undefined,\n      resolveAlways: {}\n    };\n\n    if (!(window.history && window.history.pushState)) {\n      window.location.hash = '/';\n    }\n\n    $locationProvider.html5Mode(true);\n\n    this.configure = function(cfg) {\n      angular.extend(config, cfg);\n    };\n\n    this.$get = RouterHelper;\n    RouterHelper.$inject = ['$location', '$rootScope', '$state', 'logger'];\n    /* @ngInject */\n    function RouterHelper($location, $rootScope, $state, logger) {\n      var handlingStateChangeError = false;\n      var hasOtherwise = false;\n      var stateCounts = {\n        errors: 0,\n        changes: 0\n      };\n\n      var service = {\n        configureStates: configureStates,\n        getStates: getStates,\n        stateCounts: stateCounts\n      };\n\n      init();\n\n      return service;\n\n      ///////////////\n\n      function configureStates(states, otherwisePath) {\n        states.forEach(function(state) {\n          state.config.resolve =\n            angular.extend(state.config.resolve || {}, config.resolveAlways);\n          $stateProvider.state(state.state, state.config);\n        });\n        if (otherwisePath && !hasOtherwise) {\n          hasOtherwise = true;\n          $urlRouterProvider.otherwise(otherwisePath);\n        }\n      }\n\n      function handleRoutingErrors() {\n        // Route cancellation:\n        // On routing error, go to the dashboard.\n        // Provide an exit clause if it tries to do it twice.\n        $rootScope.$on('$stateChangeError',\n          function(event, toState, toParams, fromState, fromParams, error) {\n            if (handlingStateChangeError) {\n              return;\n            }\n            stateCounts.errors++;\n            handlingStateChangeError = true;\n            var destination = (toState &&\n              (toState.title || toState.name || toState.loadedTemplateUrl)) ||\n              'unknown target';\n            var msg = 'Error routing to ' + destination + '. ' +\n              (error.data || '') + '. <br/>' + (error.statusText || '') +\n              ': ' + (error.status || '');\n            logger.warning(msg, [toState]);\n            $location.path('/');\n          }\n        );\n      }\n\n      function init() {\n        handleRoutingErrors();\n        updateDocTitle();\n      }\n\n      function getStates() { return $state.get(); }\n\n      function updateDocTitle() {\n        $rootScope.$on('$stateChangeSuccess',\n          function(event, toState, toParams, fromState, fromParams) {\n            stateCounts.changes++;\n            handlingStateChangeError = false;\n            var title = config.docTitle + ' ' + (toState.title || '');\n            $rootScope.title = title; // data bind to <title>\n          }\n        );\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.dashboard')\n    .controller('DashboardController', DashboardController);\n\n  /* @ngInject */\n  function DashboardController($q, authservice, logger) {\n    var vm = this;\n    vm.news = {\n      title: 'bexioTt',\n      description: 'Hot Towel Angular is a SPA template for Angular developers.'\n    };\n    vm.messageCount = 0;\n    vm.people = [];\n    vm.title = 'Dashboard';\n\n    activate();\n\n    function activate() {\n      var promises = [getMessageCount(), getPeople()];\n      return $q.all(promises).then(function() {\n        logger.info('Activated Dashboard View');\n      });\n    }\n\n    function getMessageCount() {\n      return authservice.getMessageCount().then(function(data) {\n        vm.messageCount = data;\n        return vm.messageCount;\n      });\n    }\n\n    function getPeople() {\n      return authservice.getPeople().then(function(data) {\n        vm.people = data;\n        return vm.people;\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.dashboard')\n    .run(appRun);\n\n  appRun.$inject = ['routerHelper'];\n  /* @ngInject */\n  function appRun(routerHelper) {\n    routerHelper.configureStates(getStates());\n  }\n\n  function getStates() {\n    return [\n      {\n        state: 'dashboard',\n        config: {\n          url: '/',\n          templateUrl: 'app/dashboard/dashboard.html',\n          controller: 'DashboardController',\n          controllerAs: 'vm',\n          title: 'dashboard',\n          settings: {\n            nav: 1,\n            content: '<i class=\"fa fa-dashboard\"></i> Dashboard'\n          }\n        }\n      }\n    ];\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.layout')\n    .directive('htSidebar', htSidebar);\n\n  /* @ngInject */\n  function htSidebar() {\n    // Opens and closes the sidebar menu.\n    // Usage:\n    //  <div ht-sidebar\">\n    //  <div ht-sidebar whenDoneAnimating=\"vm.sidebarReady()\">\n    // Creates:\n    //  <div ht-sidebar class=\"sidebar\">\n    var directive = {\n      link: link,\n      restrict: 'EA',\n      scope: {\n        whenDoneAnimating: '&?'\n      }\n    };\n    return directive;\n\n    function link(scope, element, attrs) {\n      var $sidebarInner = element.find('.sidebar-inner');\n      var $dropdownElement = element.find('.sidebar-dropdown a');\n      element.addClass('sidebar');\n      $dropdownElement.click(dropdown);\n\n      function dropdown(e) {\n        var dropClass = 'dropy';\n        e.preventDefault();\n        if (!$dropdownElement.hasClass(dropClass)) {\n          $sidebarInner.slideDown(350, scope.whenDoneAnimating);\n          $dropdownElement.addClass(dropClass);\n        } else if ($dropdownElement.hasClass(dropClass)) {\n          $dropdownElement.removeClass(dropClass);\n          $sidebarInner.slideUp(350, scope.whenDoneAnimating);\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.layout')\n    .directive('htTopNav', htTopNav);\n\n  /* @ngInject */\n  function htTopNav() {\n    var directive = {\n      bindToController: true,\n      controller: TopNavController,\n      controllerAs: 'vm',\n      restrict: 'EA',\n      scope: {\n        'navline': '='\n      },\n      templateUrl: 'app/layout/ht-top-nav.html'\n    };\n\n    TopNavController.$inject = ['$scope'];\n\n    /* @ngInject */\n    function TopNavController($scope) {\n      var vm = this;\n      $scope.isCollapsed = true;\n    }\n\n    return directive;\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.layout')\n    .controller('ShellController', ShellController);\n\n  /* @ngInject */\n  function ShellController($q, authservice) {\n    var vm = this;\n\n    function activate() {\n      var promises = [getAccessToken()];\n      return $q.all(promises).then(function() {\n        console.log('Token '+ vm);\n      });\n    }\n\n    activate();\n\n    function getAccessToken() {\n      return authservice.getPeople().then(function(data) {\n        vm.tokendata = data;\n        return vm.tokendata;\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.widgets')\n    .directive('htImgPerson', htImgPerson);\n\n  htImgPerson.$inject = ['config'];\n  /* @ngInject */\n  function htImgPerson(config) {\n    //Usage:\n    //<img ht-img-person=\"{{person.imageSource}}\"/>\n    var basePath = config.imageBasePath;\n    var unknownImage = config.unknownPersonImageSource;\n    var directive = {\n      link: link,\n      restrict: 'A'\n    };\n    return directive;\n\n    function link(scope, element, attrs) {\n      attrs.$observe('htImgPerson', function(value) {\n        value = basePath + (value || unknownImage);\n        attrs.$set('src', value);\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app.widgets')\n    .directive('htWidgetHeader', htWidgetHeader);\n\n  /* @ngInject */\n  function htWidgetHeader() {\n    //Usage:\n    //<div ht-widget-header title=\"vm.map.title\"></div>\n    // Creates:\n    // <div ht-widget-header=\"\"\n    //      title=\"Movie\"\n    //      allow-collapse=\"true\" </div>\n    var directive = {\n      scope: {\n        'title': '@',\n        'subtitle': '@',\n        'rightText': '@',\n        'allowCollapse': '@'\n      },\n      templateUrl: 'app/widgets/widget-header.html',\n      restrict: 'EA',\n      link: link\n    };\n    return directive;\n\n    function link(scope, element, attr) {\n      scope.toggleContent = function() {\n        if (scope.allowCollapse === 'true') {\n          var content = angular.element(element).siblings('.widget-content');\n          content.toggle();\n        }\n      };\n    }\n  }\n})();\n","// Include in index.html so that app level exceptions are handled.\n// Exclude from testRunner.html which should run exactly what it wants to run\n(function() {\n  'use strict';\n\n  angular\n    .module('blocks.exception')\n    .provider('exceptionHandler', exceptionHandlerProvider)\n    .config(config);\n\n  /**\n   * Must configure the exception handling\n   */\n  function exceptionHandlerProvider() {\n    /* jshint validthis:true */\n    this.config = {\n      appErrorPrefix: undefined\n    };\n\n    this.configure = function(appErrorPrefix) {\n      this.config.appErrorPrefix = appErrorPrefix;\n    };\n\n    this.$get = function() {\n      return { config: this.config };\n    };\n  }\n\n  config.$inject = ['$provide'];\n\n  /**\n   * Configure by setting an optional string value for appErrorPrefix.\n   * Accessible via config.appErrorPrefix (via config value).\n   * @param  {Object} $provide\n   */\n  /* @ngInject */\n  function config($provide) {\n    $provide.decorator('$exceptionHandler', extendExceptionHandler);\n  }\n\n  extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];\n\n  /**\n   * Extend the $exceptionHandler service to also display a toast.\n   * @param  {Object} $delegate\n   * @param  {Object} exceptionHandler\n   * @param  {Object} logger\n   * @return {Function} the decorated $exceptionHandler service\n   */\n  function extendExceptionHandler($delegate, exceptionHandler, logger) {\n    return function(exception, cause) {\n      var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';\n      var errorData = { exception: exception, cause: cause };\n      exception.message = appErrorPrefix + exception.message;\n      $delegate(exception, cause);\n      /**\n       * Could add the error to a service's collection,\n       * add errors to $rootScope, log errors to remote web server,\n       * or log locally. Or throw hard. It is entirely up to you.\n       * throw exception;\n       *\n       * @example\n       *     throw { message: 'error message we added' };\n       */\n      logger.error(exception.message, errorData);\n    };\n  }\n})();\n","/* jshint -W117, -W030 */\ndescribe('blocks.exception', function() {\n  var exceptionHandlerProvider;\n  var mocks = {\n    errorMessage: 'fake error',\n    prefix: '[TEST]: '\n  };\n\n  beforeEach(function() {\n    bard.appModule('blocks.exception', function(_exceptionHandlerProvider_) {\n      exceptionHandlerProvider = _exceptionHandlerProvider_;\n    });\n    bard.inject('$rootScope');\n  });\n\n  bard.verifyNoOutstandingHttpRequests();\n\n  describe('exceptionHandlerProvider', function() {\n    it('should have a dummy test', inject(function() {\n      expect(true).to.equal(true);\n    }));\n\n    it('should have exceptionHandlerProvider defined', inject(function() {\n      expect(exceptionHandlerProvider).to.be.defined;\n    }));\n\n    it('should have configuration', inject(function() {\n      expect(exceptionHandlerProvider.config).to.be.defined;\n    }));\n\n    it('should have configuration', inject(function() {\n      expect(exceptionHandlerProvider.configure).to.be.defined;\n    }));\n\n    describe('with appErrorPrefix', function() {\n      beforeEach(function() {\n        exceptionHandlerProvider.configure(mocks.prefix);\n      });\n\n      it('should have appErrorPrefix defined', inject(function() {\n        expect(exceptionHandlerProvider.$get().config.appErrorPrefix).to.be.defined;\n      }));\n\n      it('should have appErrorPrefix set properly', inject(function() {\n        expect(exceptionHandlerProvider.$get().config.appErrorPrefix)\n          .to.equal(mocks.prefix);\n      }));\n\n      it('should throw an error when forced', inject(function() {\n        expect(functionThatWillThrow).to.throw();\n      }));\n\n      it('manual error is handled by decorator', function() {\n        var exception;\n        exceptionHandlerProvider.configure(mocks.prefix);\n        try {\n          $rootScope.$apply(functionThatWillThrow);\n        }\n        catch (ex) {\n          exception = ex;\n          expect(ex.message).to.equal(mocks.prefix + mocks.errorMessage);\n        }\n      });\n    });\n  });\n\n  function functionThatWillThrow() {\n    throw new Error(mocks.errorMessage);\n  }\n});\n","(function() {\n  'use strict';\n\n  angular\n    .module('blocks.exception')\n    .factory('exception', exception);\n\n  /* @ngInject */\n  function exception($q, logger) {\n    var service = {\n      catcher: catcher\n    };\n    return service;\n\n    function catcher(message) {\n      return function(e) {\n        var thrownDescription;\n        var newMessage;\n        if (e.data && e.data.description) {\n          thrownDescription = '\\n' + e.data.description;\n          newMessage = message + thrownDescription;\n        }\n        e.data.description = newMessage;\n        logger.error(newMessage);\n        return $q.reject(e);\n      };\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('blocks.logger')\n    .factory('logger', logger);\n\n  logger.$inject = ['$log', 'toastr'];\n\n  /* @ngInject */\n  function logger($log, toastr) {\n    var service = {\n      showToasts: true,\n\n      error: error,\n      info: info,\n      success: success,\n      warning: warning,\n\n      // straight to console; bypass toastr\n      log: $log.log\n    };\n\n    return service;\n    /////////////////////\n\n    function error(message, data, title) {\n      toastr.error(message, title);\n      $log.error('Error: ' + message, data);\n    }\n\n    function info(message, data, title) {\n      toastr.info(message, title);\n      $log.info('Info: ' + message, data);\n    }\n\n    function success(message, data, title) {\n      toastr.success(message, title);\n      $log.info('Success: ' + message, data);\n    }\n\n    function warning(message, data, title) {\n      toastr.warning(message, title);\n      $log.warn('Warning: ' + message, data);\n    }\n  }\n} ());\n","/* Help configure the state-base ui.router */\n(function() {\n  'use strict';\n\n  angular\n    .module('blocks.router')\n    .provider('routerHelper', routerHelperProvider);\n\n  routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n  /* @ngInject */\n  function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\n    /* jshint validthis:true */\n    var config = {\n      docTitle: undefined,\n      resolveAlways: {}\n    };\n\n    if (!(window.history && window.history.pushState)) {\n      window.location.hash = '/';\n    }\n\n    $locationProvider.html5Mode(true);\n\n    this.configure = function(cfg) {\n      angular.extend(config, cfg);\n    };\n\n    this.$get = RouterHelper;\n    RouterHelper.$inject = ['$location', '$rootScope', '$state', 'logger'];\n    /* @ngInject */\n    function RouterHelper($location, $rootScope, $state, logger) {\n      var handlingStateChangeError = false;\n      var hasOtherwise = false;\n      var stateCounts = {\n        errors: 0,\n        changes: 0\n      };\n\n      var service = {\n        configureStates: configureStates,\n        getStates: getStates,\n        stateCounts: stateCounts\n      };\n\n      init();\n\n      return service;\n\n      ///////////////\n\n      function configureStates(states, otherwisePath) {\n        states.forEach(function(state) {\n          state.config.resolve =\n            angular.extend(state.config.resolve || {}, config.resolveAlways);\n          $stateProvider.state(state.state, state.config);\n        });\n        if (otherwisePath && !hasOtherwise) {\n          hasOtherwise = true;\n          $urlRouterProvider.otherwise(otherwisePath);\n        }\n      }\n\n      function handleRoutingErrors() {\n        // Route cancellation:\n        // On routing error, go to the dashboard.\n        // Provide an exit clause if it tries to do it twice.\n        $rootScope.$on('$stateChangeError',\n          function(event, toState, toParams, fromState, fromParams, error) {\n            if (handlingStateChangeError) {\n              return;\n            }\n            stateCounts.errors++;\n            handlingStateChangeError = true;\n            var destination = (toState &&\n              (toState.title || toState.name || toState.loadedTemplateUrl)) ||\n              'unknown target';\n            var msg = 'Error routing to ' + destination + '. ' +\n              (error.data || '') + '. <br/>' + (error.statusText || '') +\n              ': ' + (error.status || '');\n            logger.warning(msg, [toState]);\n            $location.path('/');\n          }\n        );\n      }\n\n      function init() {\n        handleRoutingErrors();\n        updateDocTitle();\n      }\n\n      function getStates() { return $state.get(); }\n\n      function updateDocTitle() {\n        $rootScope.$on('$stateChangeSuccess',\n          function(event, toState, toParams, fromState, fromParams) {\n            stateCounts.changes++;\n            handlingStateChangeError = false;\n            var title = config.docTitle + ' ' + (toState.title || '');\n            $rootScope.title = title; // data bind to <title>\n          }\n        );\n      }\n    }\n  }\n})();\n"],"sourceRoot":"/source/"}