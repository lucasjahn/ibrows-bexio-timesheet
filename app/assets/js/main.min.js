(function() {
  'use strict';

  angular.module('app', [
    'app.core',
    //'app.widgets',
    //'app.admin',
    'app.dashboard'
  ]);

})();

(function() {
  'use strict';

  angular
    .module('app.core', [
        'ngAnimate',
        'ngSanitize',
        'ngRoute',

        // 3rd paty
        'lumx',
        'angular-electron',
        'ngStorage',
        'timer'
    ]);
})();

(function() {
  'use strict';

  angular.module('app.dashboard', ['app.core']);
})();

(function() {
  'use strict';

  angular.module('blocks.exception', ['blocks.logger']);
})();

(function() {
  'use strict';

  angular.module('blocks.logger', []);
})();

(function() {
  'use strict';

  angular.module('blocks.router', [
    'ui.router',
    'blocks.logger'
  ]);
})();

(function() {
  'use strict';

  var config = {
    clientId: '6777100542.apps.bexio.com',
    clientSecret: 'FfdjCu3Q3Rp8Ujmcch2iFGHJC3o=',
    authorizationUrl: 'https://office.bexio.com/oauth/authorize',
    tokenUrl: 'https://office.bexio.com/oauth/access_token',
    useBasicAuthorizationHeader: false
  };

  var scopes = [
    'article_show',
    'calendar_show',
    'contact_show',
    'lead_show',
    'task_show',
    'monitoring_show',
    'monitoring_edit',
    'project_show'
  ];

  angular
    .module('app.core')
    .factory('authservice', ['electron-oauth2', '$localStorage', authservice ]);


  function authservice(electronOauth2, $localStorage) {
    var service = {
      getAccessToken: getAccessToken
    };

    return service;

    function getAccessToken() {
      var windowParams = {
        width: 800,
        height: 600,
        alwaysOnTop: true,
        autoHideMenuBar: true,
        webPreferences: {
          nodeIntegration: false
        },
        closable: false,
        frame: false,
        center: true
      };
      
      var options = {
        scope: scopes.join(' '),
        state: Math.random().toString(36).substring(7)
      };

      var myApiOauth = electronOauth2(config, windowParams);

      // Get access token promise (electron-oauth2)
      return myApiOauth.getAccessToken(options)
    }
  }
})();

(function() {
  'use strict';

  bexioservice.$inject = ['$http', '$q', '$localStorage'];
  angular
    .module('app.core')
    .factory('bexioservice', bexioservice);

  /* @ngInject */
  function bexioservice($http, $q, $localStorage) {
    var service = {
      getTimesByUser: getTimesByUser,
      getProjects: getProjects,
      getProjectById: getProjectById,
      getContacts: getContacts,
      getContactById: getContactById,
      getServices: getServices,
      getServiceById: getServiceById
    };

    return service;

    // Read user data
    function getTimesByUser(userId) {
      var userData = $localStorage.userData;

      var filter = [
        {
          'field': 'user_id',
          'value': userId
        }
      ];

      var request = {
        method: 'POST',
        url: `https://office.bexio.com/api2.php/${userData.org}/timesheet/search?&limit=20&order_by=id_desc`,
        data: filter
      };

      return $http(request);

    }

    function getProjects() {
      var userData = $localStorage.userData;

      var request = {
        method: 'GET',
        url: `https://office.bexio.com/api2.php/${userData.org}/pr_project?order_by=id`
      };

      return $http(request);
    }

    function getProjectById(id) {
      return  getObjById($localStorage.projects, 'id', id);
    }

    function getContacts() {
      var userData = $localStorage.userData;

      var filter = [
        {
          "field": "contact_type_id",
          "value": 1
        }
      ];

      var request = {
        method: 'POST',
        url: `https://office.bexio.com/api2.php/${userData.org}/contact/search`,
        data: filter
      };

      return $http(request);
    }

    function getContactById(id) {
      return  getObjById($localStorage.contacts, 'id', id);
    }

    function getObjById(obj, field, value) {
      var search = {};
      search[field] = value;

      return _.findWhere(obj, search);
    }

    function getServices() {
      var userData = $localStorage.userData;

      var request = {
        method: 'GET',
        url: `https://office.bexio.com/api2.php/${userData.org}/client_service`
      };

      return $http(request);
    }

    function getServiceById(id) {
      return  getObjById($localStorage.services, 'id', id);
    }
  }
})();

(function() {
  'use strict';

  var core = angular.module('app.core');

  core
      .config(['remoteProvider', function(remoteProvider) {
        remoteProvider.register('electron-oauth2');
      }])
      .run(['$http', '$localStorage', function($http, $localStorage) {
          if ($localStorage.userData) {
              $http.defaults.headers.common.Authorization = `Bearer ${$localStorage.userData.access_token}`;
              $http.defaults.headers.common.Accept = 'application/json';
          }
      }]);


})();

/* global toastr:false, moment:false */
(function() {
  'use strict';

  angular
    .module('app.core')
})();

(function () {
    'use strict';

    getRoutes.$inject = ['$routeProvider'];
    angular
        .module('app.dashboard')
        .config(getRoutes);

    /* @ngInject */
    function getRoutes($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'dashboard/dashboard.html',
                controller: 'Dashboard',
                controllerAs: 'vm'
            })
            .otherwise({
                redirectTo: '/'
            });
    }

})();
(function() {
  'use strict';

  Dashboard.$inject = ['$q', 'authservice', '$localStorage', 'bexioservice'];
  angular
    .module('app.dashboard')
    .controller('Dashboard', Dashboard);

  /* @ngInject */
  function Dashboard($q, authservice, $localStorage, bexioservice) {
      var vm = this;
      vm.title = 'Track your Time!';
      vm.times = '';
      vm.projects = '';


      ///////////////////////

      var now = new Date();

      if(!$localStorage.userData) {
          authservice.getAccessToken()
              .then(function(data) {
                  // Save access data
                  var d = new Date();
                  d = new Date(d.getTime() + data.expires_in);
                  data.expires = d.toString();

                  $localStorage.userData = data;
                  return getTimes(data.user_id);
              })
              .then(function(result) {
                  vm.times = result.data;
                  
              });
      } else {
          getTimes($localStorage.userData.user_id)
              .then(function(result) {
                  vm.times = result.data;
              });
      }

      bexioservice.getProjects()
          .then(function(result) {
              $localStorage.projects = vm.projects = result.data;
          });
      
      bexioservice.getContacts()
          .then(function(result) {
              $localStorage.contacts = vm.contacts = result.data;
          });

      bexioservice.getServices()
          .then(function(result) {
              $localStorage.services = vm.services = result.data;
          });

      $q.all([bexioservice.getContacts(), bexioservice.getProjects(), bexioservice.getServices()]).then(function() {
          vm.times = $localStorage.times = _.map(vm.times, function(obj, key) {
              obj.contact = bexioservice.getContactById(obj.contact_id);
              obj.project = bexioservice.getProjectById(obj.pr_project_id);
              obj.client_service = bexioservice.getServiceById(obj.slient_service_id);

              return obj;
          });

          console.log()
      });

      function getTimes(userId) {
          return bexioservice.getTimesByUser(userId);
      }
  }
})();

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function() {
  'use strict';

  angular
    .module('blocks.exception')
    .provider('exceptionHandler', exceptionHandlerProvider)
    .config(config);

  /**
   * Must configure the exception handling
   */
  function exceptionHandlerProvider() {
    /* jshint validthis:true */
    this.config = {
      appErrorPrefix: undefined
    };

    this.configure = function(appErrorPrefix) {
      this.config.appErrorPrefix = appErrorPrefix;
    };

    this.$get = function() {
      return { config: this.config };
    };
  }

  config.$inject = ['$provide'];

  /**
   * Configure by setting an optional string value for appErrorPrefix.
   * Accessible via config.appErrorPrefix (via config value).
   * @param  {Object} $provide
   */
  /* @ngInject */
  function config($provide) {
    $provide.decorator('$exceptionHandler', extendExceptionHandler);
  }

  extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];

  /**
   * Extend the $exceptionHandler service to also display a toast.
   * @param  {Object} $delegate
   * @param  {Object} exceptionHandler
   * @param  {Object} logger
   * @return {Function} the decorated $exceptionHandler service
   */
  function extendExceptionHandler($delegate, exceptionHandler, logger) {
    return function(exception, cause) {
      var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
      var errorData = { exception: exception, cause: cause };
      exception.message = appErrorPrefix + exception.message;
      $delegate(exception, cause);
      /**
       * Could add the error to a service's collection,
       * add errors to $rootScope, log errors to remote web server,
       * or log locally. Or throw hard. It is entirely up to you.
       * throw exception;
       *
       * @example
       *     throw { message: 'error message we added' };
       */
      logger.error(exception.message, errorData);
    };
  }
})();

/* jshint -W117, -W030 */
describe('blocks.exception', function() {
  var exceptionHandlerProvider;
  var mocks = {
    errorMessage: 'fake error',
    prefix: '[TEST]: '
  };

  beforeEach(function() {
    bard.appModule('blocks.exception', function(_exceptionHandlerProvider_) {
      exceptionHandlerProvider = _exceptionHandlerProvider_;
    });
    bard.inject('$rootScope');
  });

  bard.verifyNoOutstandingHttpRequests();

  describe('exceptionHandlerProvider', function() {
    it('should have a dummy test', inject(function() {
      expect(true).to.equal(true);
    }));

    it('should have exceptionHandlerProvider defined', inject(function() {
      expect(exceptionHandlerProvider).to.be.defined;
    }));

    it('should have configuration', inject(function() {
      expect(exceptionHandlerProvider.config).to.be.defined;
    }));

    it('should have configuration', inject(function() {
      expect(exceptionHandlerProvider.configure).to.be.defined;
    }));

    describe('with appErrorPrefix', function() {
      beforeEach(function() {
        exceptionHandlerProvider.configure(mocks.prefix);
      });

      it('should have appErrorPrefix defined', inject(function() {
        expect(exceptionHandlerProvider.$get().config.appErrorPrefix).to.be.defined;
      }));

      it('should have appErrorPrefix set properly', inject(function() {
        expect(exceptionHandlerProvider.$get().config.appErrorPrefix)
          .to.equal(mocks.prefix);
      }));

      it('should throw an error when forced', inject(function() {
        expect(functionThatWillThrow).to.throw();
      }));

      it('manual error is handled by decorator', function() {
        var exception;
        exceptionHandlerProvider.configure(mocks.prefix);
        try {
          $rootScope.$apply(functionThatWillThrow);
        }
        catch (ex) {
          exception = ex;
          expect(ex.message).to.equal(mocks.prefix + mocks.errorMessage);
        }
      });
    });
  });

  function functionThatWillThrow() {
    throw new Error(mocks.errorMessage);
  }
});

(function() {
  'use strict';

  exception.$inject = ['$q', 'logger'];
  angular
    .module('blocks.exception')
    .factory('exception', exception);

  /* @ngInject */
  function exception($q, logger) {
    var service = {
      catcher: catcher
    };
    return service;

    function catcher(message) {
      return function(e) {
        var thrownDescription;
        var newMessage;
        if (e.data && e.data.description) {
          thrownDescription = '\n' + e.data.description;
          newMessage = message + thrownDescription;
        }
        e.data.description = newMessage;
        logger.error(newMessage);
        return $q.reject(e);
      };
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('blocks.logger')
    .factory('logger', logger);

  logger.$inject = ['$log', 'toastr'];

  /* @ngInject */
  function logger($log, toastr) {
    var service = {
      showToasts: true,

      error: error,
      info: info,
      success: success,
      warning: warning,

      // straight to console; bypass toastr
      log: $log.log
    };

    return service;
    /////////////////////

    function error(message, data, title) {
      toastr.error(message, title);
      $log.error('Error: ' + message, data);
    }

    function info(message, data, title) {
      toastr.info(message, title);
      $log.info('Info: ' + message, data);
    }

    function success(message, data, title) {
      toastr.success(message, title);
      $log.info('Success: ' + message, data);
    }

    function warning(message, data, title) {
      toastr.warning(message, title);
      $log.warn('Warning: ' + message, data);
    }
  }
} ());

/* Help configure the state-base ui.router */
(function() {
  'use strict';

  angular
    .module('blocks.router')
    .provider('routerHelper', routerHelperProvider);

  routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];
  /* @ngInject */
  function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {
    /* jshint validthis:true */
    var config = {
      docTitle: undefined,
      resolveAlways: {}
    };

    if (!(window.history && window.history.pushState)) {
      window.location.hash = '/';
    }

    $locationProvider.html5Mode(true);

    this.configure = function(cfg) {
      angular.extend(config, cfg);
    };

    this.$get = RouterHelper;
    RouterHelper.$inject = ['$location', '$rootScope', '$state', 'logger'];
    /* @ngInject */
    function RouterHelper($location, $rootScope, $state, logger) {
      var handlingStateChangeError = false;
      var hasOtherwise = false;
      var stateCounts = {
        errors: 0,
        changes: 0
      };

      var service = {
        configureStates: configureStates,
        getStates: getStates,
        stateCounts: stateCounts
      };

      init();

      return service;

      ///////////////

      function configureStates(states, otherwisePath) {
        states.forEach(function(state) {
          state.config.resolve =
            angular.extend(state.config.resolve || {}, config.resolveAlways);
          $stateProvider.state(state.state, state.config);
        });
        if (otherwisePath && !hasOtherwise) {
          hasOtherwise = true;
          $urlRouterProvider.otherwise(otherwisePath);
        }
      }

      function handleRoutingErrors() {
        // Route cancellation:
        // On routing error, go to the dashboard.
        // Provide an exit clause if it tries to do it twice.
        $rootScope.$on('$stateChangeError',
          function(event, toState, toParams, fromState, fromParams, error) {
            if (handlingStateChangeError) {
              return;
            }
            stateCounts.errors++;
            handlingStateChangeError = true;
            var destination = (toState &&
              (toState.title || toState.name || toState.loadedTemplateUrl)) ||
              'unknown target';
            var msg = 'Error routing to ' + destination + '. ' +
              (error.data || '') + '. <br/>' + (error.statusText || '') +
              ': ' + (error.status || '');
            logger.warning(msg, [toState]);
            $location.path('/');
          }
        );
      }

      function init() {
        handleRoutingErrors();
        updateDocTitle();
      }

      function getStates() { return $state.get(); }

      function updateDocTitle() {
        $rootScope.$on('$stateChangeSuccess',
          function(event, toState, toParams, fromState, fromParams) {
            stateCounts.changes++;
            handlingStateChangeError = false;
            var title = config.docTitle + ' ' + (toState.title || '');
            $rootScope.title = title; // data bind to <title>
          }
        );
      }
    }
  }
})();

//# sourceMappingURL=data:application/json;base64,
