(function() {
  'use strict';

  angular.module('app', [
    'app.core',
    //'app.widgets',
    //'app.admin',
    'app.dashboard'
  ]);

})();

(function() {
  'use strict';

  angular
    .module('app.core', [
        'ngAnimate',
        'ngSanitize',
        'ngRoute',

        // 3rd paty
        'lumx',
        'angular-electron',
        'ngStorage',
        'timer'
    ]);
})();

(function() {
  'use strict';

  angular.module('app.dashboard', ['app.core']);
})();

(function() {
  'use strict';

  var config = {
    clientId: '6777100542.apps.bexio.com',
    clientSecret: 'FfdjCu3Q3Rp8Ujmcch2iFGHJC3o=',
    authorizationUrl: 'https://office.bexio.com/oauth/authorize',
    tokenUrl: 'https://office.bexio.com/oauth/access_token',
    useBasicAuthorizationHeader: false
  };

  var scopes = [
    'article_show',
    'calendar_show',
    'contact_show',
    'lead_show',
    'task_show',
    'monitoring_show',
    'monitoring_edit',
    'project_show'
  ];

  angular
    .module('app.core')
    .factory('authservice', ['electron-oauth2', '$localStorage', authservice ]);


  function authservice(electronOauth2, $localStorage) {
    var service = {
      getAccessToken: getAccessToken
    };

    return service;

    function getAccessToken() {
      var windowParams = {
        width: 800,
        height: 600,
        alwaysOnTop: true,
        autoHideMenuBar: true,
        webPreferences: {
          nodeIntegration: false
        },
        closable: false,
        frame: false,
        center: true
      };
      
      var options = {
        scope: scopes.join(' '),
        state: Math.random().toString(36).substring(7)
      };

      var myApiOauth = electronOauth2(config, windowParams);

      // Get access token promise (electron-oauth2)
      return myApiOauth.getAccessToken(options)
    }
  }
})();

(function() {
  'use strict';

  bexioservice.$inject = ['$http', '$q', '$localStorage'];
  angular
    .module('app.core')
    .factory('bexioservice', bexioservice);

  /* @ngInject */
  function bexioservice($http, $q, $localStorage) {
    var service = {
      getTimesByUser: getTimesByUser,
      getProjects: getProjects,
      getProjectById: getProjectById,
      getContacts: getContacts,
      getContactById: getContactById,
      getServices: getServices,
      getServiceById: getServiceById
    };

    return service;

    // Read user data
    function getTimesByUser(userId) {
      var userData = $localStorage.userData;

      var filter = [
        {
          'field': 'user_id',
          'value': userId
        }
      ];

      var request = {
        method: 'POST',
        url: `https://office.bexio.com/api2.php/${userData.org}/timesheet/search?&limit=20&order_by=id_desc`,
        data: filter
      };

      return $http(request);

    }

    function getProjects() {
      var userData = $localStorage.userData;

      var request = {
        method: 'GET',
        url: `https://office.bexio.com/api2.php/${userData.org}/pr_project?order_by=id`
      };

      return $http(request);
    }

    function getProjectById(id) {
      return  getObjById($localStorage.projects, 'id', id);
    }

    function getContacts() {
      var userData = $localStorage.userData;

      var filter = [
        {
          "field": "contact_type_id",
          "value": 1
        }
      ];

      var request = {
        method: 'POST',
        url: `https://office.bexio.com/api2.php/${userData.org}/contact/search`,
        data: filter
      };

      return $http(request);
    }

    function getContactById(id) {
      return  getObjById($localStorage.contacts, 'id', id);
    }

    function getObjById(obj, field, value) {
      var search = {};
      search[field] = value;

      return _.findWhere(obj, search);
    }

    function getServices() {
      var userData = $localStorage.userData;

      var request = {
        method: 'GET',
        url: `https://office.bexio.com/api2.php/${userData.org}/client_service`
      };

      return $http(request);
    }

    function getServiceById(id) {
      return  getObjById($localStorage.services, 'id', id);
    }
  }
})();

(function() {
  'use strict';

  var core = angular.module('app.core');

  core
      .config(['remoteProvider', function(remoteProvider) {
        remoteProvider.register('electron-oauth2');
      }])
      .config(['$httpProvider', function ($httpProvider) {

          // Code for UI-Router have been removed for brevity

          // Inject APIInterceptor factory
          $httpProvider.interceptors.push('APIInterceptor');

      }])
      .run(['$http', '$localStorage', function($http, $localStorage) {
          if ($localStorage.userData) {
              $http.defaults.headers.common.Authorization = `Bearer ${$localStorage.userData.access_token}`;
              $http.defaults.headers.common.Accept = 'application/json';
          }
      }]);


})();

/* global toastr:false, moment:false */
(function() {
  'use strict';

  angular
    .module('app.core')
})();

(function() {
    'use strict';

    APIInterceptor.$inject = ['$q', '$injector'];
    angular
        .module('app.core')
        .factory('APIInterceptor', APIInterceptor);

    /* @ngInject */
    function APIInterceptor($q, $injector) {

        var APIInterceptor = {
            // On request success
            request: function(config) {
                console.log('REQUEST');
                console.log(config);
                //Return the config or wrap it in a promise if blank.
                return config || $q.when(config);
            },

            // On request failure
            requestError: function(rejection) {
                console.log('REJECTION');
                  console.log(rejection); // Contains the data about the error on the request.

                // Return the promise rejection.
                return $q.reject(rejection);
            },

            // On response success
            response: function(response) {
                console.log('RESPONSE');
                   console.log(response); // Contains the data from the response.

                // Return the response or promise.
                return response || $q.when(response);
            },

            // On response failture
            responseError: function(rejection) {

                // This will capture all HTTP errors such as 401 errors so be careful with your code. You can however
                // examine the "rejection" object so you can add more filtering
                var $localStorage = $injector.get('$localStorage');
                var $http = $injector.get('$http');
                var deferred = $q.defer();
                var authservice = $injector.get('authservice');

                // Session has expired
                if (rejection.status == 401) {

                    // Create a new session (recover the session)
                    // We use login method that logs the user in using the current credentials and
                    // returns a promise
                    var config = {
                        clientId: '6777100542.apps.bexio.com',
                        clientSecret: 'FfdjCu3Q3Rp8Ujmcch2iFGHJC3o=',
                        authorizationUrl: 'https://office.bexio.com/oauth/authorize',
                        tokenUrl: 'https://office.bexio.com/oauth/access_token',
                        useBasicAuthorizationHeader: false
                    };

                    var userData = $localStorage.userData;

                    var request = {
                        method: 'POST',
                        url: `https://office.bexio.com/oauth/refresh_token?client_id=${config.clientId}&client_secret=${config.clientSecret}&refresh_token=${userData.refresh_token}`
                    };

                    $http(request).then(deferred.resolve, deferred.reject);


                    // When the session recovered, make the same backend call again and chain the request
                    return deferred.promise.then(function (result) {
                        $localStorage.userData = result.data;
                        return $http(rejection.config);
                    });
                }

                else if (rejection.status == 404) {

                    authservice.getAccessToken().then(deferred.resolve, deferred.reject);

                    return deferred.promise.then(function (result) {
                        $localStorage.userData = result.data;
                        return $http(rejection.config);
                    });
                }

                return $q.reject(rejection);
            }
        };

        return APIInterceptor;
    }
})();

(function() {
    'use strict';

    SessionAPI.$inject = ['$rootScope', '$localStorage'];
    angular
        .module('app.core')
        .factory('SessionAPI', SessionAPI);

    /* @ngInject */
    function SessionAPI($rootScope, $localStorage) {

        var SessionAPI = {

            get: function (key) {
                return cookieStore.get(key);
            },
            remove: function(key) {
                cookieStore.remove(key, { path : '/', domain : COOKIE_DOMAINS });
            },

            // other methods have been removed for brevity

            destroy: function (message) {
                user = {};
                this.remove('id');
                this.remove('token');
                this.remove('expiresAt');
                this.remove('role');
                this.remove('authType');
                $rootScope.$emit('session:destroy', { message: message });
            }
        };
        return SessionAPI;
    }
})();

(function () {
    'use strict';

    getRoutes.$inject = ['$routeProvider'];
    angular
        .module('app.dashboard')
        .config(getRoutes);

    /* @ngInject */
    function getRoutes($routeProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'dashboard/dashboard.html',
                controller: 'Dashboard',
                controllerAs: 'vm'
            })
            .otherwise({
                redirectTo: '/'
            });
    }

})();
(function() {
  'use strict';

  Dashboard.$inject = ['$q', 'authservice', '$localStorage', 'bexioservice'];
  angular
    .module('app.dashboard')
    .controller('Dashboard', Dashboard);

  /* @ngInject */
  function Dashboard($q, authservice, $localStorage, bexioservice) {
      var vm = this;
      vm.title = 'Track your Time!';
      vm.times = '';
      vm.projects = '';


      ///////////////////////

      var now = new Date();

      if(!$localStorage.userData) {
          authservice.getAccessToken()
              .then(function(data) {
                  // Save access data
                  var d = new Date();
                  d = new Date(d.getTime() + data.expires_in);
                  data.expires = d.toString();

                  $localStorage.userData = data;
                  return getTimes(data.user_id);
              })
              .then(function(result) {
                  vm.times = result.data;
                  
              });
      } else {
          getTimes($localStorage.userData.user_id)
              .then(function(result) {
                  vm.times = result.data;
              });
      }

      bexioservice.getProjects()
          .then(function(result) {
              $localStorage.projects = vm.projects = result.data;
          });
      
      bexioservice.getContacts()
          .then(function(result) {
              $localStorage.contacts = vm.contacts = result.data;
          });

      bexioservice.getServices()
          .then(function(result) {
              $localStorage.services = vm.services = result.data;
          });

      $q.all([bexioservice.getContacts(), bexioservice.getProjects(), bexioservice.getServices()]).then(function() {
          vm.times = $localStorage.times = _.map(vm.times, function(obj, key) {
              obj.contact = bexioservice.getContactById(obj.contact_id);
              obj.project = bexioservice.getProjectById(obj.pr_project_id);
              obj.client_service = bexioservice.getServiceById(obj.slient_service_id);

              return obj;
          });

          console.log()
      });

      function getTimes(userId) {
          return bexioservice.getTimesByUser(userId);
      }
  }
})();

//# sourceMappingURL=data:application/json;base64,
